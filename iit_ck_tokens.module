<?php

/**
* @file
* Provides IIT custom tokens for Chicago-Kent
*/


/* ***************************************** */
/* Hook Implementations                      */
/* ***************************************** */

/**
 * Implements hook_token_info(). This hook will register the tokens.
 */
function iit_ck_tokens_token_info() {

  $info['tokens']['node']['faculty-type'] = array(
    'name' => t('Faculty Type'),
    'description' => t('A replacement of adjunct is returned if adjunct is selected in faculty type field otherwise nothing.'),
  );

  return $info;
}

/**
 * Implements hook_tokens(). This hook will operate the token and replace it with it's value.
 *
 * @param $type
 *   The machine-readable name of the type (group) of token being replaced, such
 *   as 'node', 'user', or another type defined by a hook_token_info()
 *   implementation.
 * @param $tokens
 *   An array of tokens to be replaced. The keys are the machine-readable token
 *   names, and the values are the raw [type:token] strings that appeared in the
 *   original text.
 * @param array $data
 *   (optional) An associative array of data objects to be used when generating
 *   replacement values, as supplied in the $data parameter to token_replace().
 * @param array $options
 *   (optional) An associative array of options for token replacement; see
 *   token_replace() for possible values.
 *
 * @return array An associative array of replacement values, keyed by the raw [type:token]
 * An associative array of replacement values, keyed by the raw [type:token]
 * strings from the original text.
 */
function iit_ck_tokens_tokens($type, $tokens, array $data = array(), array $options = array()) {
    $replacements = array();

    // Node tokens.
    if ($type == 'node' && !empty($data['node'])) {
      $node = $data['node'];
      foreach ($tokens as $name => $original) {
        switch ($name) {
          case 'faculty-type':
            if ($items = field_get_items('node', $node, 'field_faculty_type')) {
              $termIds = array();
              foreach ($items as $item) {
                array_push($termIds, $item['tid']);
              }
              $terms = taxonomy_term_load_multiple($termIds);
              foreach ($terms as $term) {
                if (strtolower($term->name) == 'adjunct') {
                  $replacements[$original] = 'adjunct';
                }
              }
            }
            break;
          //end faculty-type case
        }
      }
    }

    return $replacements;
}